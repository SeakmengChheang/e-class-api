enum Gender {
    MALE @enum(value: "male")
    FEMALE @enum(value: "female")
    OTHERS @enum(value: "others")
}

type User {
    id: ID!
    uuid: String
    username: String!
    email: String!
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
    identity: Identity @hasOne
}

type Identity {
    id: ID!
    user_id: Int!
    first_name: String!
    last_name: String!
    gender: Gender!
    photo_url: String
    contact_number: String
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
}

input CreateUserInput {
    username: String!
    email: String!
    password: String!
    password_confirmation: String!
    first_name: String!
    last_name: String!
    gender: Gender!
    contact_number: String
    photo: Upload
}

input UpdateIdentityInput {
    user_id: ID!
    first_name: String
    last_name: String
    gender: Gender
    contact_number: String
    photo: Upload
}

type Mutation {
    createUser(input: CreateUserInput! @spread): User! @createUserValidation @field(resolver: "App\\GraphQL\\Mutations\\User\\CreateUser@__invoke")
    deleteUser(id: ID! @eq): User @field(resolver: "App\\GraphQL\\Mutations\\User\\DeleteUser@__invoke")
    updateIdentity(input: UpdateIdentityInput! @spread): User @updateIdentityValidation @field(resolver: "App\\GraphQL\\Mutations\\User\\UpdateIdentity@__invoke")
}

type Query  {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    userFindByUsername(username: String! @eq): User @find
}
