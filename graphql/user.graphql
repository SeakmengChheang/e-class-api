enum Gender {
    MALE @enum(value: "male")
    FEMALE @enum(value: "female")
    OTHERS @enum(value: "others")
}

type User {
    id: ID!
    uuid: String
    username: String!
    email: String!
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
    identity: Identity @hasOne
}

type Identity {
    id: ID!
    first_name: String!
    last_name: String!
    gender: Gender
    photo_url: String
    contact_number: String
    user: User! @belongsTo
    created_at: DateTimeTz
    updated_at: DateTimeTz
}

input CreateIdentityBelongsTo {
    connect: ID
    create: CreateIdentityInput
}

input CreateIdentityInput {
    first_name: String
    last_name: String
    gender: Gender
    contact_number: String
    photo: Upload
    user: CreateUserBelongsTo
}

input UpdateIdentityInput {
    user_id: ID
    first_name: String
    last_name: String
    gender: Gender
    contact_number: String
    photo: Upload
}

input CreateUserInput {
    username: String!
    email: String!
    password: String!
    password_confirmation: String!
    identity: CreateIdentityBelongsTo
}

input UpdateUserInput {
    id: ID!
    email: String
    username: String
    uuid: String
    password: String
    password_confirmation: String
}

type Mutation @guard {
    me: User! @auth(guard: "api")
    createUser(input: CreateUserInput! @spread): User!
        @create
        @createUserValidation
    updateUser(input: UpdateUserInput! @spread): User!
        @update
        @updateUserValidation
    deleteUser(id: ID! @eq): User! @delete

    updateIdentity(input: UpdateIdentityInput @spread): User!
        @updateIdentityValidation
}

type Query @guard {
    me: User @auth
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    userFindByUsername(username: String! @eq): User @find
}
