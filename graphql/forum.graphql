type Forum {
    id: ID!
    title: String
    description: String
    class_content: ClassContent! @belongsTo(relation: "classContent")
    class: Classes! @belongsTo
    author: User! @belongsTo
    comments: [Comment!] @morphMany(type: "paginator")
    comments_count: Int! @count(relation: "comments")
    answer: Comment @belongsTo
    created_at: DateTimeTz
    updated_at: DateTimeTz
}

input CreateForumBelongsTo {
    connect: ID!
}

input CreateClassContentBelongsTo {
    connect: ID!
}

input CreateForumInput {
    title: String @rules(apply: ["required", "max:255", "string"])
    description: String @rules(apply: ["required", "max:60000"])
    class_content_id: ID! @rules(apply: ["required", "integer", "exists:class_contents,id"])
}

input UpdateForumInput {
    id: ID!
    title: String
    description: String
    answer: UpdateCommentBelongsTo
}

extend type Mutation @guard {
    createForum(input: CreateForumInput! @spread): Forum!
        @create
        @can(ability: "create", injectArgs: "true")
    updateForum(input: UpdateForumInput! @spread): Forum!
        @update
        @can(ability: "update", injectArgs: "true")
    deleteForum(id: ID! @eq): Forum!
        @delete
        @can(ability: "delete", injectArgs: "true")
}

extend type Query @guard {
    myForums: [Forum!] @paginate(builder: "App\\Models\\Forum@myForumsPaginate")
    forumsInClass(class_id: ID! @eq): [Forum!]
        @paginate
        @can(ability: "viewAny", injectArgs: "true")
    forum(id: ID! @eq): Forum @first @can(ability: "view", find: "id")
}
