type Classes {
    id: ID!
    name: String!
    code: String!
    teacher: User @belongsTo
    students: [User!] @belongsToMany
    class_categories: [ClassCategory!] @hasMany(relation: "classCategories")
    class_contents: [ClassContent!] @hasMany(relation: "classContents")
    exams: [Exam!] @hasMany
    schedules: [Schedule!] @hasMany
}

extend type Query {
    classes: [Classes!] @paginate(defaultCount: 10)
    class(id: ID @eq): Classes @find
}

extend type Mutation @guard {
    createClass(input: CreateClassInput! @spread): Classes!
        @create
        @createClassesValidation
        @canAccess(requiredRole: "admin")
    updateClass(input: UpdateClassInput! @spread): Classes!
        @update
        @canAccess(requiredRole: "admin")
    deleteClass(id: ID! @eq): Classes!
        @delete
        @canAccess(requiredRole: "admin")
    syncStudents(input: SyncStudentsToClassInput @spread): Classes
        @canAccess(requiredRole: "admin")
}

input SyncStudentsToClassInput {
    class_id: ID!
    students: CreateStudentsRelation
}

input CreateStudentsRelation {
    sync: [ID!] @rulesForArray(apply: ["exists:users,id"])
}

#create
input CreateClassInput {
    name: String!
    code: String!
    teacher: CreateUserBelongsTo
}

input CreateUserBelongsTo {
    connect: ID
    create: CreateUserInput
    disconnect: ID
}

#update
input UpdateClassInput {
    id: ID!
    teacher: UpdateUserBelongsTo
}

input UpdateUserBelongsTo {
    connect: ID
    disconnect: ID
}
