type StudentAbsence {
    id: ID!
    student: User! @belongsTo
    has_permission: Boolean!
    reason: String!
    class_attendance: ClassAttendance! @belongsTo(relation: "classAttendance")
}

extend type Query {
    StudentAbsences(class_id: ID! @eq): [StudentAbsence!] @paginate(defaultCount: 10) @can(ability: "viewAny")
}

extend type Mutation @guard {
    createStudentAbsence(
        input: CreateStudentAbsenceInput! @spread
    ): StudentAbsence!
        @create
        @createStudentAbsenceValidation
        @can(ability: "create", injectArgs: "true")
    updateStudentAbsence(
        input: UpdateStudentAbsenceInput! @spread
    ): StudentAbsence!
        @update
        @createStudentAbsenceValidation
        @can(ability: "update", find: "id")
    deleteStudentAbsence(id: ID! @eq): StudentAbsence!
        @delete
        @can(ability: "delete", find: "id")
}

input CreateStudentAbsenceInput {
    student_id: Int!
    has_permission: Boolean!
    reason: String!
    class_attendance_id: Int!
}

input UpdateStudentAbsenceInput {
    id: ID!
    has_permission: Boolean!
    reason: String!
}
