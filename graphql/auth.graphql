input LoginInput {
    username: String!
    password: String!
}

input RefreshTokenInput {
    refresh_token: String
}

type AuthPayload {
    access_token: String
    refresh_token: String
    expires_in: Int
    token_type: String
    user: User!
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    statusCode: Int!
    message: String
}

type ResetPasswordResponse {
    status: String!
    statusCode: Int!
    message: String
}

type UpdatePasswordResponse {
    status: String!
    message: String
}

input ForgotPasswordInput {
    username: String! @rules(apply: ["required"])
}

input NewPasswordWithOtpInput {
    username: String!
    otp: Int! @rules(apply: ["required"])
    password: String! @rules(apply: ["required", "min:8"])
}

input UpdatePassword {
    old_password: String!
    password: String! @rules(apply: ["required", "min:8"])
}

extend type Mutation {
    login(input: LoginInput @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve"
        )
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve"
        )
    logout: LogoutResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve"
        )
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse!
    resetPassword(
        input: NewPasswordWithOtpInput @spread
    ): ResetPasswordResponse!
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve"
        )
        @guard(with: ["api"])
    updateEmail(email: String! @rules(apply: ["email"])): User!
        @update
        @inject(context: "user.id", name: "id")
        @guard(with: ["api"])
}
