type StudentExam {
    id: ID!
    student: User! @belongsTo
    attempts: Int! #auto increment on saving
    answer: [ExamAnswer!]
    points: Float #auto calculate when grading
    created_at: DateTimeTz
    updated_at: DateTimeTz
}

type ExamAnswer {
    id: ID!
    answers: [String!]
    file: FileUpload
    points: Float
}

type FileUpload {
    url: String
    name: String
}

input StudentExamInput {
    exam_id: ID!
    answer: [CreateExamAnswerInput!]
}

input CreateExamAnswerInput {
    id: ID!
    answers: [String!] @rules(apply: ["array"])
    file: Upload @rules(apply: ["file", "size:512"])
}

input GradeStudentExamInput {
    id: ID!
    answer: [GradeExamAnswerInput!]
}

input GradeExamAnswerInput {
    id: ID!
    points: Float!
}

extend type Mutation @guard {
    studentTakesExam(input: StudentExamInput! @spread): StudentExam!
        @createStudentExamValidation
        @inject(context: "user.id", name: "student_id")
        @can(ability: "create", injectArgs: "true")
    gradeStudentExam(input: gradeStudentExamInput! @spread): StudentExam!
        @can(ability: "grade", find: "id")
}

extend type Query @guard {
    #intended for students
    myExamsInClass(class_id: ID! @eq): [StudentExam!]
        @can(ability: "viewAny", injectArgs: "true")
    myExam(id: ID! @eq): StudentExam @can(ability: "view", find: "id") @first
    #intended for teachers in grading exam part
    studentExam(id: ID! @eq): StudentExam!
        @find
        @can(ability: "view", find: "id")
}
