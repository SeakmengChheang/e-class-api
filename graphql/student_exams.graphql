type StudentExam {
    id: ID!
    student: User! @belongsTo
    attempts: Int! #auto increment on saving
    answer: [ExamAnswer!]
    points: Float #auto calculate when grading
    created_at: DateTimeTz
    updated_at: DateTimeTz
}

type ExamAnswer {
    id: String!
    answers: [String!]
    points: Float
}

extend type Mutation @guard {
    createStudentExam (input: StudentExamInput! @spread): StudentExam!
        @createStudentExamValidation @can(ability: "create", injectArgs: "true")
    updateStudentExam (input: StudentExamInput! @spread): StudentExam!
        @createStudentExamValidation @can(ability: "create", injectArgs: "true")
    gradeStudentExam (input: gradeStudentExamInput! @spread): StudentExam! @can(ability: "grade", find: "id")
}

extend type Query @guard {
    #intended for students
    myExams(class_id: ID! @eq): [StudentExam!] @can(ability: "viewAny", injectArgs: "true")
    #intended for teachers in grading exam part
    studentExam(id: ID! @eq): StudentExam! @find @can(ability: "view", find: "id")
    studentExamIds(id: ID! @eq): [ID!]! @field(resolver: "Exam\\GetStudentExamIds") 
}

input StudentExamInput {
    exam_id: ID!
    answer: [CreateExamAnswerInput!]
}

input CreateExamAnswerInput {
    id: ID!
    answers: [String!]
}

input gradeStudentExamInput {
    id: ID!
    answer: [GradeExamAnswerInput!]
}

input GradeExamAnswerInput {
    id: ID!
    points: Float!
}
