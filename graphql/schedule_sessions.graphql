type ScheduleSession {
    id: ID!
    start_time: String
    end_time: String
    schedule: Schedule @belongsTo
}

input CreateScheduleSessionInput {
    schedule: CreateScheduleSessionBelongsTo
    start_time: String
    end_time: String
}

input CreateScheduleSessionBelongsTo {
    connect: ID
    create: CreateScheduleInput
    upsert: UpsertScheduleSessionInput
    disconnect: ID
}

input UpsertScheduleSessionInput {
    id: ID
    day: Day
    class: CreateClassBelongsTo
}

input UpdateScheduleSessionInput {
    id: ID!
    start_time: String
    end_time: String
}

extend type Mutation {
    createScheduleSession(
        input: CreateScheduleSessionInput! @spread
    ): ScheduleSession! @create @can(ability: "create", injectArgs: "true")
    updateScheduleSession(
        input: UpdateScheduleSessionInput! @spread
    ): ScheduleSession!
        @update
        @can(ability: "update", find: "UpdateScheduleSessionInput.id")
    deleteScheduleSession(id: ID! @eq): ScheduleSession!
        @delete
        @can(ability: "delete", find: "id")
}

extend type Query {
    ScheduleSession(id: ID! @eq): ScheduleSession! @find
}
