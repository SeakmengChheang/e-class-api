enum QuestionTypes {
    QCM @enum(value: "qcm")
    ESSAY @enum(value: "essay")
    UPLOAD @enum(value: "upload")
}

type Question {
    id: ID!
    question: String!
    type: QuestionTypes!
    answers: [String!]
    possibles: [String!]
    points: Float!
}

type Exam {
    id: ID!
    name: String!
    possible: Float!
    description: String
    qa: [Question!]
    attempts: Int!
    due_at: DateTimeTz
    publishes_at: DateTimeTz
    class_category: ClassCategory! @belongsTo(relation: "classCategory")
    class: Classes! @belongsTo
    submittings: [StudentExam!] @hasMany
    created_at: String
    updated_at: String
}

input CreateExamInput {
    class_category: CreateClassCategoryBelongsTo
    name: String!
    description: String
    qa: [CreateQuestionInput]
    attempts: Int!
    due_at: DateTimeTz
    publishes_at: DateTimeTz
}

input CreateQuestionInput {
    question: String!
    type: QuestionTypes!
    answers: [String!]
    possibles: [String!]
    points: Float!
}

input UpdateQuestionInput {
    id: ID!
    question: String
    type: QuestionTypes
    answers: [String!]
    possibles: [String!]
    points: Float
}

input UpdateExamInput {
    id: ID!
    name: String
    possible: Float
    description: String
    qa: [UpdateQuestionInput]
    attempts: Int
    due_at: DateTimeTz
    publishes_at: DateTimeTz
}

input ConnectExamBelongsTo {
    connect: ID!
}

extend type Mutation @guard {
    createExam(input: CreateExamInput! @spread): Exam!
        @createExamValidation
        @can(ability: "create", injectArgs: "true")
    updateExam(input: UpdateExamInput! @spread): Exam!
        @can(ability: "update", find: "id")
    deleteExam(id: ID! @eq): Exam! @delete @can(ability: "delete", find: "id")
}

extend type Query {
    #students and teacher access to the same query
    exam(id: ID! @eq): Exam!
        @field(resolver: "Exam\\FindExamFor")
        @can(ability: "view", injectArgs: "true")
    #students and teacher access to the same query
    exams(class_id: ID! @eq): [Exam!] @all
    # @can(ability: "viewAny", injectArgs: "true")
    studentExamIds(id: ID! @eq): [ID!]!
        @field(resolver: "Exam\\GetStudentExamIds")
        @can(ability: "viewAny", injectArgs: "true")
}
