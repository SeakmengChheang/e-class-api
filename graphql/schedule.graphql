enum Day {
    MONDAY @enum(value: "monday")
    TUESDAY @enum(value: "tuesday")
    WEDDAY @enum(value: "wedday")
    THURSDAY @enum(value: "thursday")
    FRIDAY @enum(value: "friday")
    SATURDAY @enum(value: "saturday")
    SUNDAY @enum(value: "sunday")
}

type Schedule {
    id: ID!
    class: Classes @belongsTo
    day: Day
}

input CreateScheduleInput {
    day: Day
    class: CreateClassBelongsTo
}

input CreateClassBelongsTo {
    connect: ID
}

input UpdateScheduleInput {
    id: ID!
    day: Day
}

extend type Mutation {
    createSchedule(input: CreateScheduleInput! @spread): Schedule!
        @create
        @can(ability: "create", injectArgs: "true")
    updateSchedule(input: UpdateScheduleInput! @spread): Schedule!
        @update
        @can(ability: "update", find: "UpdateScheduleInput.id")
    deleteSchedule(id: ID! @eq): Schedule!
        @delete
        @can(ability: "delete", find: "id")
}

extend type Query {
    Schedule(id: ID! @eq): Schedule! @find
}
